#Method a block of code to specifically execute one task, it helps to promote reading of ocde. Once created it can be claled anywhere in the code. 

## Syntax of method defintion:

# AccessModifier, staticOrNot, dataTypeofReturnValue nameOfMethod (ParamaterList) Exception List
 
{  
body
}

*accessModifier : public, private, protected, default or package - optional
*StaticorNot* the static elements will belong to the class and not to the instance. Static elements such as methods and variables willb e able to access without creating objects
- optional
DatatypeofReturnValue - if it doesn't return anything, it will be set as void, required
nameofMethod - it should start with letters, _ $ ( required)
parameterList - declaration of variables that will be used to execute the tasks, these or parameters are assigned a value at the moment the method called ( required)
Exception List - Set Exception classes that will be triggered when an unexpected error occurs
body - surrounded by curly braces, contains set of statements to execute a task.

## Examples:

public static int sum ( int a, int b) // Declartion of a method, abstract method, because no body has been defined.

public static int product ( int x, int y) // method definiton, concrete method, because a body has been defined

{

return x*y
}

public static int sumAll ( int n, int m)
{
int sum =0;
for (int i=n, i<=m; i++)

{
   sum += n;
}


return sum;

}

public static void main (String [] args) // main method
 {
   System.out.print(args[0]);
   }
   
   private static void greet () {
   System.out.println("Hello");
   
   }
   
   
 }
 
 #Method Signature
 # Method Call
 
 
 ## Syntax:
 nameofMethod(ArgumentList);
 
 values that will be assigned to the parameterList
 
 ##Semantics 
 
 Hold a space in memory and give it as the name of the method call
 search for a method declaration that matches the method signature of the method call
 if a match is found, assign the argument values to the parameters variables and execute the statements
    if there is a return statement, evaluate the expression and replace the method call with the resultant value, end the method call, free the space in memory
    
     if not return statement, end method call
     if a match is not found, an error will occur,resulting in either not compiling


## Example: greet();
 int total = sumAll (10,20);
 int p = product (3,5);
 int total2 = sumAll ("4,",5); //Error no match found
 
 ## Return Statement
 
 Syntax:
  return expression;
  
  ## Semantics
  Evaluate the expression
  Replace the method call with the resultant value
  End the method call
// finish this at 12:30pm to 1:30pm!!